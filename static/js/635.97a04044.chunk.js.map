{"version":3,"file":"static/js/635.97a04044.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Phonebook/Phonebook.styled.jsx","redux/contacts/selectors.js","components/Phonebook/Phonebook.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/GlobalStyle.jsx","components/App.styled.jsx","components/UserPhonebook/UserPhonebook.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  text-align: center;\n`;\n","import { Title } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title }) => {\n  return (\n    <div>\n      <Title>{title}</Title>\n    </div>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Form = styled(FormikForm)`\n  width: 100%;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n\nexport const Button = styled.button`\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n\n  :hover {\n    background-color: green;\n    transition-property: background-color;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","\nexport const getContacts = state => state.contacts.items\nexport const getFilter = state => state.filter\nexport const getIsLoading = state => state.contacts.isLoading\nexport const getError = state => state.contacts.error","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { FormLabel, Form, ErrorMessage, Button } from './Phonebook.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst PhonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer'\n    )\n    .required('Input name...'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Input number...'),\n});\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = ({ name, number }, actions) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name, number }));\n      actions.resetForm();\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={PhonebookSchema}\n      onSubmit={({ name, number }, actions) =>\n        handleSubmit({ name, number }, actions)\n      }\n    >\n      <Form>\n        <FormLabel>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Field name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\n\nexport default Phonebook;","import styled from 'styled-components';\n\nexport const List = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n  justify-content: space-between;\n`;\n\nexport const ButtonDelete = styled.button`\n:hover {\n  background-color: red;\n  transition-property: background-color;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n`;\n","import { List, ButtonDelete } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContactItem = ({ item: { name, number, id } }) => {\n  \n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <List>\n        {name}: {number}\n        <ButtonDelete\n          type=\"button\"\n          disabled={isLoading}\n          onClick={() => dispatch(deleteContact(id))}\n        >\n          Delete\n        </ButtonDelete>\n      </List>\n    </div>\n  );\n};\n\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  padding: 0;\n`;\n","import ContactItem from '../ContactItem/ContactItem';\nimport { ContactList } from './ContactsList.styled';\n\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  return (\n    <div>\n      <ContactList>\n        {contacts.length === 0 && <p>No contacts added...</p>}\n        {contacts\n          .filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          )\n          .map(contact => (\n            <ContactItem key={contact.id} item={contact} />\n          ))}\n      </ContactList>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  width: 100%;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nimport { FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filterContactsValue = evt => {\n    dispatch(addFilter(evt.target.value));\n  };\n\n  return (\n    <div>\n      <label>Find Contacts by name</label>\n      <FilterInput type=\"text\" value={filter} onChange={filterContactsValue} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  width: 350px;\n  border: 1px solid black;\n  border-radius: 8px;\n`;\n\nexport const Spinner = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 24px;\n`;\n","import Section from '../Section/Section';\nimport Phonebook from '../Phonebook/Phonebook';\nimport ContactsList from '../ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\nimport { GlobalStyle } from '../GlobalStyle';\nimport { Container, Spinner } from '../App.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport { toast } from 'react-hot-toast';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst UserPhonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section title={'Phonebook'} />\n      <Phonebook />\n      <Section title={'Contacts'} />\n      <Filter />\n\n      <ContactsList />\n      <Spinner>\n        {isLoading && !error && (\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"4\"\n            animationDuration=\"0.75\"\n            width=\"24\"\n            visible={true}\n          />\n        )}\n      </Spinner>\n\n      {error && toast.error('Sorry, an error occurred...')}\n      <GlobalStyle />\n    </Container>\n  );\n};\n\nexport default UserPhonebook;\n","import UserPhonebook from 'components/UserPhonebook/UserPhonebook';\nimport { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <UserPhonebook />\n    </div>\n  );\n}\n"],"names":["Title","styled","title","FormLabel","Form","FormikForm","ErrorMessage","FormikError","Button","getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","PhonebookSchema","Yup","shape","name","matches","required","number","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","actions","some","contact","toLowerCase","alert","addContact","resetForm","handleSubmit","component","type","List","ButtonDelete","item","id","disabled","onClick","deleteContact","ContactList","length","includes","map","FilterInput","value","onChange","evt","addFilter","target","GlobalStyle","createGlobalStyle","Container","Spinner","useEffect","fetchContacts","strokeColor","strokeWidth","animationDuration","width","visible","toast","Contacts"],"sourceRoot":""}