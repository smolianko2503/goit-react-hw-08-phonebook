{"version":3,"file":"static/js/289.cd8e601b.chunk.js","mappings":"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","sources":["components/App.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Phonebook/Phonebook.styled.jsx","redux/selectors.js","components/Phonebook/Phonebook.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  width: 350px;\n  border: 1px solid black;\n  border-radius: 8px;\n \n\n`","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  text-align: center;\n`;\n","import { Title } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title }) => {\n  return (\n    <div>\n      <Title>{title}</Title>\n    </div>\n  );\n};\n\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Form = styled(FormikForm)`\n  width: 100%;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n\nexport const Button = styled.button`\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n\n  :hover {\n    background-color: green;\n    transition-property: background-color;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","\nexport const getContacts = state => state.contacts\nexport const getFilter = state => state.filter","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { FormLabel, Form, ErrorMessage, Button } from './Phonebook.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contactsSlice';\nimport { getContacts } from 'redux/selectors';\n\nconst PhonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer'\n    )\n    .required('Input name...'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Input number...'),\n});\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = ({ name, number }, actions) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContacts(name, number));\n      actions.resetForm();\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={PhonebookSchema}\n      onSubmit={({ name, number }, actions) =>\n        handleSubmit({ name, number }, actions)\n      }\n    >\n      <Form>\n        <FormLabel>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Field name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\n\nexport default Phonebook\n\n\n","import styled from \"styled-components\";\n\nexport const FilterInput = styled.input`\nwidth: 100%;\n`\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\n\nimport { FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filterContactsValue = evt => {\n    dispatch(addFilter(evt.target.value));\n  };\n\n  return (\n    <div>\n      <label>Find Contacts by name</label>\n      <FilterInput type=\"text\" value={filter} onChange={filterContactsValue} />\n    </div>\n  );\n};\n\n\n\nexport default Filter;\n\n\n","import styled from 'styled-components';\n\nexport const List = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n  justify-content: space-between;\n`;\n\nexport const ButtonDelete = styled.button`\n:hover {\n  background-color: red;\n  transition-property: background-color;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n`;\n","import { List, ButtonDelete } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contactsSlice';\n\nconst ContactItem = ({ item: { name, number, id } }) => {\n  \n  const dispatch = useDispatch();\n  \n  return (\n    <div>\n      <List>\n        {name}: {number}\n        <ButtonDelete\n          type=\"button\"\n          onClick={() => dispatch(deleteContacts(id))}\n        >\n          Delete\n        </ButtonDelete>\n      </List>\n    </div>\n  );\n};\n\n\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  padding: 0;\n`;\n","import ContactItem from '../ContactItem/ContactItem';\nimport { ContactList } from './ContactsList.styled';\n\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  return (\n    <div>\n      <ContactList>\n        {contacts\n          .filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          )\n          .map(contact => (\n            <ContactItem key={contact.id} item={contact} />\n          ))}\n      </ContactList>\n    </div>\n  );\n};\n\n\nexport default ContactsList;\n\n","import { Container } from \"components/App.styled\"\nimport Section from \"components/Section/Section\"\nimport Phonebook from \"components/Phonebook/Phonebook\"\nimport Filter from \"components/Filter/Filter\"\nimport ContactsList from \"components/ContactsList/ContactsList\"\n\n\n\nconst Contacts = () => {\n\n    return (\n      <Container>\n      <Section title={'Phonebook'} />\n      <Phonebook />\n      <Section title={'Contacts'} />\n      <Filter />\n      <ContactsList />\n    </Container>\n    )\n\n}\n\n\nexport default Contacts"],"names":["Container","styled","Title","title","FormLabel","Form","FormikForm","ErrorMessage","FormikError","Button","getContacts","state","contacts","getFilter","filter","PhonebookSchema","Yup","shape","name","matches","required","number","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","actions","some","contact","toLowerCase","alert","addContacts","resetForm","handleSubmit","component","type","FilterInput","value","onChange","evt","addFilter","target","List","ButtonDelete","item","id","onClick","deleteContacts","ContactList","includes","map"],"sourceRoot":""}